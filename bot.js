const { Bot, InlineKeyboard } = require('grammy');

const bot = new Bot('7449980150:AAGD6GaayQ75IQ1O6siIeRQh6Ju5RiCV6-k');

bot.command('start', (ctx) => {
    ctx.reply('–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä–æ–≤–æ–π –±–æ—Ç! –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –≤ "–ö–∞–º–µ–Ω—å, –ù–æ–∂–Ω–∏—Ü—ã, –ë—É–º–∞–≥–∞".\n\n–í–æ—Ç –∫—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –∏–≥—Ä—ã:\n1. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /play.\n2. –ü–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –≤—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ö–∞–º–µ–Ω—å", "–ù–æ–∂–Ω–∏—Ü—ã" –∏–ª–∏ "–ë—É–º–∞–≥–∞" –¥–ª—è —Å–≤–æ–µ–π —Å—Ç–∞–≤–∫–∏.\n3. –ë–æ—Ç —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –≤—ã–±–µ—Ä–µ—Ç –æ–¥–∏–Ω –∏–∑ —Ç—Ä–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.\n4. –ü–æ—Å–ª–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —è —Å–æ–æ–±—â—É –≤–∞–º, –≤—ã–∏–≥—Ä–∞–ª–∏ –ª–∏ –≤—ã.\n5. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∞–≤–∏–ª–∞—Ö –∏–≥—Ä—ã –∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö.\n–£–¥–∞—á–∏! üçÄ');
});

bot.command('help', (ctx) => {
    ctx.reply('–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –∏ –∫–æ–º–∞–Ω–¥—ã\n\n–ö–æ–º–∞–Ω–¥—ã, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤ –∏–≥—Ä–µ:\n/start: –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –∏–≥—Ä—ã.\n/play: –ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–π –∏–≥—Ä—ã. –°–¥–µ–ª–∞–π—Ç–µ —Å–≤–æ—é —Å—Ç–∞–≤–∫—É: "–ö–∞–º–µ–Ω—å", "–ù–æ–∂–Ω–∏—Ü—ã" –∏–ª–∏ "–ë—É–º–∞–≥–∞".\n/help: –ü–æ–ª—É—á–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∞–≤–∏–ª–∞—Ö –∏–≥—Ä—ã –∏ –∫–æ–º–∞–Ω–¥–∞—Ö.\n\n–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã:\n1. –°–¥–µ–ª–∞–π—Ç–µ —Å–≤–æ—é —Å—Ç–∞–≤–∫—É: –í—ã–±–µ—Ä–∏—Ç–µ –º–µ–∂–¥—É "–ö–∞–º–µ–Ω—å", "–ù–æ–∂–Ω–∏—Ü—ã" –∏ "–ë—É–º–∞–≥–∞".\n2. –ë–æ—Ç —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –≤—ã–±–µ—Ä–µ—Ç –æ–¥–∏–Ω –∏–∑ —Ç—Ä–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.\n3. –ü–æ–ª—É—á–∏–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å, —Ö–æ—Ç–∏—Ç–µ –ª–∏ —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑.\n\n–ù–∞–¥–µ—é—Å—å, —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –Ω–∞—Å–ª–∞–¥–∏—Ç—å—Å—è –∏–≥—Ä–æ–π. –£–¥–∞—á–∏! üé≤');
});

bot.command('play', (ctx) => {
    const keyboard = new InlineKeyboard()
        .text('–ö–∞–º–µ–Ω—å', 'rock')
        .row()
        .text('–ù–æ–∂–Ω–∏—Ü—ã', 'scissors')
        .row()
        .text('–ë—É–º–∞–≥–∞', 'paper');

    ctx.reply('–°–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É:', { reply_markup: keyboard });
});

bot.callbackQuery('rock', async (ctx) => {
    const options = ['–∫–∞–º–µ–Ω—å', '–Ω–æ–∂–Ω–∏—Ü—ã', '–±—É–º–∞–≥–∞'];
    const botChoice = options[Math.floor(Math.random() * options.length)];
    const resultText = determineWinner('–∫–∞–º–µ–Ω—å', botChoice);
    
    await ctx.reply(resultText);
    await askToPlayAgain(ctx);
});

bot.callbackQuery('scissors', async (ctx) => {
    const options = ['–∫–∞–º–µ–Ω—å', '–Ω–æ–∂–Ω–∏—Ü—ã', '–±—É–º–∞–≥–∞'];
    const botChoice = options[Math.floor(Math.random() * options.length)];
    const resultText = determineWinner('–Ω–æ–∂–Ω–∏—Ü—ã', botChoice);
    
    await ctx.reply(resultText);
    await askToPlayAgain(ctx);
});

bot.callbackQuery('paper', async (ctx) => {
    const options = ['–∫–∞–º–µ–Ω—å', '–Ω–æ–∂–Ω–∏—Ü—ã', '–±—É–º–∞–≥–∞'];
    const botChoice = options[Math.floor(Math.random() * options.length)];
    const resultText = determineWinner('–±—É–º–∞–≥–∞', botChoice);
    
    await ctx.reply(resultText);
    await askToPlayAgain(ctx);
});

function determineWinner(userChoice, botChoice) {
    if (userChoice === botChoice) {
        return `–ù–∏—á—å—è! –í—ã –æ–±–∞ –≤—ã–±—Ä–∞–ª–∏ ${botChoice}.`;
    } else if (
        (userChoice === '–∫–∞–º–µ–Ω—å' && botChoice === '–Ω–æ–∂–Ω–∏—Ü—ã') ||
        (userChoice === '–Ω–æ–∂–Ω–∏—Ü—ã' && botChoice === '–±—É–º–∞–≥–∞') ||
        (userChoice === '–±—É–º–∞–≥–∞' && botChoice === '–∫–∞–º–µ–Ω—å')
    ) {
        return `–í—ã –≤—ã–±—Ä–∞–ª–∏ ${userChoice}, –∞ –±–æ—Ç –≤—ã–±—Ä–∞–ª ${botChoice}. –í—ã –ø–æ–±–µ–¥–∏–ª–∏! üéâ`;
    } else {
        return `–í—ã –≤—ã–±—Ä–∞–ª–∏ ${userChoice}, –∞ –±–æ—Ç –≤—ã–±—Ä–∞–ª ${botChoice}. –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. üò¢`;
    }
}

async function askToPlayAgain(ctx) {
    const keyboard = new InlineKeyboard()
        .text('–î–∞', 'yes')
        .row()
        .text('–ù–µ—Ç', 'no');

    await ctx.reply('–•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑?', { reply_markup: keyboard });
}

bot.on('callback_query:data', (ctx) => {
    const data = ctx.callbackQuery.data;

    if (data === 'yes') {
        ctx.reply('–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /play!');
    } else if (data === 'no') {
        ctx.reply('–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É! –ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â—ë —Ä–∞–∑, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /play.');
    }
});

bot.start();
console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.');
